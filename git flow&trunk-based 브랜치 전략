## git branch 깔끔하게 만들도록 도와주는 방법론???

- git flow
- github flow
- gitlab flow 
- trunk-based ETC...

1. 브랜치 관리 쉬움
2. 팀원이 아무리 많아도 개발절차가 매끄러움

***프로젝트 리드임? 알아야함.***

### 안정적인 운영 git flow
```
git flow 전략은 크게 5개 브랜치를 운영
```
- main 브랜치
- develop 브랜치 (개발용)
- feature 브랜치 (develop에 기능추가용)
- hotfix 브랜치 (main 브랜치 버그해결용)
- 가끔 release 브랜치 (develop 브랜치를 main 브랜치에 합치기 전에 최종 테스트용)

### Trunk-based 전략

```
대중에 배포를 해도 상관없는 프로그램?
업데이트 안하는 안정적인 프로그램이면 
굳이 많은 브랜치 필요 x
```

1. 기능추가, 버그픽스가 필요하면 main 브랜치에서 새로운 브랜치를 하나 만들어서 코드짭니다.
      - 브랜치마다 작명 잘하는게 중요합니다. 

2. 기능이 완성되었으면 main 브랜치에 합칩니다.
      - 이제 브랜치 쓸데없으니 삭제합니다.

3. main 브랜치에 있는 코드를 필요할 때 마다 유저들에게 배포합니다.


- trunk-based 개발의 장점은 **코드를 한 브랜치에서만 관리**하기 때문에 편리합니다. 
- 크게 개발해서 **한 번에 merge 하는 것 보다 작은 단위로 merge 하는 것**이 더 안전합니다. 
- **main 브랜치에 있는 코드가 뻑이나면 큰일나기 때문에** 테스트나 코드리뷰를 자주해야합니다. <br>
그래서 테스트를 자주하고 자동화해놓는 곳들이 제대로 사용가능합니다. 

### merge 할 때 어떤 방법 쓰는게 좋은가요?
기록을 남겨야하는 중요한 브랜치를 merge할 땐 3-way merge <br>
기록을 남길 필요없는 쓸데없는 브랜치를 merge할 땐 squash, rebase 쓰면 됩니다. 

